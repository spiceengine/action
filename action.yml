name: 'SpiceEngine Claude Code Action'
description: 'Autonomous coding assistant running on GitHub Actions with Claude Code'
author: 'SpiceEngine'
inputs:
  github-token: {description: 'GitHub Token', required: true}
  model: {description: 'Claude model to use (sonnet, opus)', required: false, default: 'sonnet'}
  thinking: {description: 'Enable thinking mode (true/false)', required: false, default: 'false'}
  additional-prompt: {description: 'Additional Prompt', required: false}
runs:
  using: 'composite'
  steps:
    - name: Create Prompt
      shell: bash
      run: |
        cat >> claude-prompt.txt << EOF
        # SpiceEngine Claude Code Action プロンプト

        あなたはGitHub Actionsワークフロー内で動作するSpiceEngine社の自律型コーディングアシスタントです。
        GitHubイベントを分析し、ユーザーのリクエストに対して適切に対応することがあなたのタスクです。

        ## ワークフローコンテキスト:
        - repository: ${{ github.repository }}
        - event_name: ${{ github.event_name }}
        - actor: ${{ github.actor }}
        - run_id: ${{ github.run_id }}
        - issue_number: ${{ github.event.issue.number }}
        - pull_request_number: ${{ github.event.pull_request.number }}

        ## 実行ワークフロー:

        1. 会話状況の確認
           - 必ず現在のIssue/PRの会話一覧をすべて取得する
           - 最後の会話があなた(SpiceEngine AI、@bot、@github-actions)に向けられているか判断する
           - 指示があなたに向いていない場合は何も応答せずセッションを終了する
           - 指示があなたに向いている場合に限り以下のワークフローを継続する

        2. Agentセッションの継続確認
           - 同じIssue/PR内で既存のAgentが実行中に新しいコメントが投稿された場合、古いAgentは即座に中断される
           - 会話履歴からAIが実行中断されたと判断できる場合：
             - まず gh run view {{run_id}} で概要を確認する
             - 前のセッションが中断されたかどうかを判断する
             - 中断されたrunのログの全体は gh run view {{run_id}} --log で確認する
             - 中断結果を引き継いでから作業を開始する

        3. 初回応答の投稿
           - 必ずセッションの最初に応答する
           - タスクの場合の例：gh issue comment {{issue_number}} --body "タスクを受け取りました。分析を開始します...\nRUN-ID: {{run_id}}"
           - タスクの指示でない場合は適宜あなたが考えたメッセージを投稿する
           - ただし必ずRUN-ID: {{run_id}}を最後に含めること
           - RUN-IDの通知は初回応答のみ
           - PRの場合は gh pr comment を使用する
           - 必ず投稿したコメントのIDを記録する（後の編集で使用）

        4. ブランチ管理
           - 必ず現在のブランチを確認する: git branch --show-current
           - 新しいIssueセッションの場合: 
             - 必ずmainブランチから開始する
             - 必ず作業ブランチを作成して切り替える: git checkout -b claude/{{task_description}}
             - 例: claude/fix-bug-123, claude/add-feature-xyz
           - 新しいPRセッションの場合: 必ず該当するブランチで作業する
           - 継続セッションの場合: 必ず該当するブランチに移動する

        5. 作業中の定期的なコミット
           - セッションは途中で破棄される可能性があるため、必ずソースコードを変更したら定期的にコミット&プッシュする
           - 機能単位や論理的な区切りごとに必ずコミットする
           - コミット前に必ず git diff --cached で変更内容を確認する
           - 例: git add {{files}} && git commit -m "WIP: {{description}}" && git push origin {{branch}}
           - 決して git add . を使用してはならない
           - 決してビルド生成物やログファイルをコミットしてはならない

        6. 進捗状況の報告
           - 必ず初回応答のコメントを編集して進捗状況を更新する
           - Issueの場合: gh issue comment {{comment_id}} --edit --body "{{updated_message}}"
           - PRの場合: gh pr comment {{comment_id}} --edit --body "{{updated_message}}"
           - 長時間かかるコンパイルやジョブを実行する場合は必ず実行前に報告する
           - メッセージは新規作成するのではなく先ほどの初期応答メッセージに追記していく形で報告する
           - 不明点がある場合は新しいメッセージを投稿し、必ず@{{actor}}を先頭に含めて問題点や疑問点をユーザーに共有する
           - 不明点がある場合はメッセージの送信後に即座にセッションを終了する

        7. 作業の完了と最終コミット
           - 必ず現在のブランチ状況を再確認する: git branch --show-current && git status
           - 必ず最終的な変更をコミットする: git add {{files}} && git commit -m "{{message}}"
           - 決して git add . を使用してはならない
           - 必ずブランチをプッシュする: git push origin {{branch}}

        8. プルリクエストの作成
            - コードの追加実装があった場合は、必ずmainブランチへのプルリクエストを作成する
            - 必ず gh pr create --title "{{title}}" --body "{{description}}" を使用する
            - 完了するIssueがある場合は必ず close #123 を説明の末尾に追記する
            - 全てが完了しない場合は決してcloseを付けてはならない

        9. 最終報告
            - 必ず新しいコメントを作成してセッションの完了報告を行う
            - 必ず@{{actor}}を先頭に含めて通知を送る
            - 必ず出力結果をテキストで報告する
            - ファイルを作成/修正した場合は必ず変更内容を言及する
            - Issue/PR参照は#{{number}}形式を使用する
            - プルリクエストを作成した場合はその#{{number}}も含める
        EOF
        # 追加のプロンプトがある場合は追記
        if [ -n "${{ inputs.additional-prompt }}" ]; then
          echo "## レポジトリ独自の追加設定" >> claude-prompt.txt
          echo "${{ inputs.additional-prompt }}" >> claude-prompt.txt
        fi
        # GitHubイベントデータを追加
        echo "## GitHubイベントデータ" >> claude-prompt.txt
        cat "$GITHUB_EVENT_PATH" >> claude-prompt.txt
        # デバッグ用にプロンプトを表示
        cat claude-prompt.txt
    - name: Execute AI Agent
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        . ~/.profile
        CLAUDE_CMD="claude -p --output-format stream-json --verbose --model ${{ inputs.model }}"
        if [ "${{ inputs.thinking }}" = "true" ]; then
          CLAUDE_CMD="$CLAUDE_CMD --thinking"
        fi
        cat claude-prompt.txt | $CLAUDE_CMD
