#!/bin/bash

# SpikyBot Memory操作コマンド - Canvas知識永続化

# Slack API共通関数
slack_api_call() {
  local method="$1"
  local params="$2"
  
  if [ -z "$SLACK_BOT_TOKEN" ]; then
    echo "Error: SLACK_BOT_TOKEN環境変数が設定されていません"
    return 1
  fi
  
  curl -s -X GET \
    -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
    -H "Content-Type: application/x-www-form-urlencoded" \
    "https://slack.com/api/${method}?${params}"
}

SUBCOMMAND="$1"
shift

case "$SUBCOMMAND" in
  list)
    # Canvas一覧取得
    SEARCH_QUERY="$1"
    
    if [ -n "$SEARCH_QUERY" ]; then
      echo "=== Slack Canvas検索: '$SEARCH_QUERY' ==="
    else
      echo "=== Slack Canvas一覧 ==="
    fi
    
    # デバッグ情報
    echo "Debug: SLACK_BOT_TOKEN設定状況: ${SLACK_BOT_TOKEN:+設定済み}${SLACK_BOT_TOKEN:-未設定}"
    echo "Debug: トークン先頭4文字: ${SLACK_BOT_TOKEN:0:4}***"
    
    # Slack API経由でCanvas一覧を取得（検索クエリがある場合は検索）
    if [ -n "$SEARCH_QUERY" ]; then
      # 検索APIを使用
      RESPONSE=$(slack_api_call "files.list" "types=canvas&count=200&query=${SEARCH_QUERY}")
    else
      # 通常のリスト取得
      RESPONSE=$(slack_api_call "files.list" "types=canvas&count=200&show_files_hidden_by_limit=true")
    fi
    CURL_EXIT_CODE=$?
    
    echo "Debug: curl終了コード: $CURL_EXIT_CODE"
    echo "Debug: レスポンス長: ${#RESPONSE}"
    
    if [ $CURL_EXIT_CODE -ne 0 ]; then
      echo "Error: Slack API呼び出しに失敗しました (curl終了コード: $CURL_EXIT_CODE)"
      exit 1
    fi
    
    # APIレスポンスを解析
    OK_STATUS=$(echo "$RESPONSE" | jq -r '.ok' 2>/dev/null)
    if [ "$OK_STATUS" != "true" ]; then
      echo "Error: Canvas一覧の取得に失敗しました"
      echo "$RESPONSE" | jq '.' 2>/dev/null || echo "$RESPONSE"
      exit 1
    fi
    
    # Canvas一覧を整形して表示
    echo "=== Canvas一覧 ==="
    echo "$RESPONSE" | jq -r '.files[] | "- ID: \(.id)\n  名前: \(.name // .title // "無題")\n  作成日: \(.created)\n  URL: \(.permalink)\n"' 2>/dev/null
    
    # 総数とページング情報を表示
    TOTAL_COUNT=$(echo "$RESPONSE" | jq '.files | length' 2>/dev/null || echo "0")
    echo "合計: ${TOTAL_COUNT}個のCanvas"
    
    # ページング情報があれば表示
    HAS_MORE=$(echo "$RESPONSE" | jq -r '.has_more // false' 2>/dev/null)
    if [ "$HAS_MORE" = "true" ]; then
      echo "注意: さらに多くのCanvasが存在する可能性があります"
    fi
    
    # デバッグ: 権限情報
    echo ""
    echo "=== デバッグ情報 ==="
    echo "使用しているトークンのスコープで表示可能なCanvasのみが表示されています"
    echo "もし期待するCanvasが表示されない場合:"
    echo "1. Canvasが存在するチャンネルにBotが追加されているか確認"
    echo "2. Canvas名が正しいか確認（大文字小文字、スペース等）"
    ;;
    
  view)
    # Canvas内容表示
    CANVAS_ID="$1"
    
    if [ -z "$CANVAS_ID" ]; then
      echo "Usage: sb-memory view <canvas_id>"
      echo "  canvas_id: Canvas file ID (e.g., F1234567890)"
      exit 1
    fi
    
    echo "=== Canvas内容表示: $CANVAS_ID ==="
    
    # Canvas情報を取得
    RESPONSE=$(slack_api_call "files.info" "file=${CANVAS_ID}")
    CURL_EXIT_CODE=$?
    
    if [ $CURL_EXIT_CODE -ne 0 ]; then
      echo "Error: Canvas情報の取得に失敗しました"
      exit 1
    fi
    
    # レスポンス確認
    OK_STATUS=$(echo "$RESPONSE" | jq -r '.ok' 2>/dev/null)
    if [ "$OK_STATUS" != "true" ]; then
      echo "Error: Canvas取得エラー"
      echo "$RESPONSE" | jq '.' 2>/dev/null || echo "$RESPONSE"
      exit 1
    fi
    
    # Canvas情報を表示
    echo "=== Canvas情報 ==="
    echo "$RESPONSE" | jq '{
      id: .file.id,
      name: .file.name,
      title: .file.title,
      created: .file.created,
      user: .file.user,
      permalink: .file.permalink
    }' 2>/dev/null || echo "$RESPONSE"
    
    # Canvas内容を取得（document_contentフィールドを確認）
    echo ""
    echo "=== Canvas内容 ==="
    
    # document_contentフィールドを確認
    DOCUMENT_CONTENT=$(echo "$RESPONSE" | jq -r '.file.document_content // empty' 2>/dev/null)
    
    if [ -n "$DOCUMENT_CONTENT" ]; then
      # document_contentが存在する場合
      CONTENT_TYPE=$(echo "$DOCUMENT_CONTENT" | jq -r '.type // empty' 2>/dev/null)
      if [ "$CONTENT_TYPE" = "markdown" ]; then
        # Markdown内容を表示
        echo "Canvas内容（Markdown形式）:"
        echo "$DOCUMENT_CONTENT" | jq -r '.markdown // empty' 2>/dev/null
      else
        echo "Canvas内容（形式: $CONTENT_TYPE）:"
        echo "$DOCUMENT_CONTENT" | jq '.' 2>/dev/null
      fi
    else
      # document_contentが存在しない場合
      echo "document_contentフィールドが存在しません。"
      echo ""
      echo "利用可能なファイルフィールド:"
      echo "$RESPONSE" | jq '.file | keys' 2>/dev/null | head -20
    fi
    ;;
    
  save)
    # Canvas内容追記
    CANVAS_ID="$1"
    CONTENT="$2"
    
    if [ -z "$CANVAS_ID" ] || [ -z "$CONTENT" ]; then
      echo "Usage: sb-memory save <canvas_id> 'markdown_content'"
      echo "  canvas_id: Canvas file ID (e.g., F1234567890)"
      echo "  markdown_content: 追記するマークダウン内容"
      exit 1
    fi
    
    echo "=== Canvas内容追記: $CANVAS_ID ==="
    
    # Canvas情報を取得して名前を確認
    CANVAS_INFO=$(slack_api_call "files.info" "file=${CANVAS_ID}")
    if [ $? -ne 0 ]; then
      echo "Error: Canvas情報の取得に失敗しました"
      exit 1
    fi
    
    # Canvas名を取得 (name, title, または filename フィールドから)
    CANVAS_NAME=$(echo "$CANVAS_INFO" | jq -r '.file.name // .file.title // .file.filename // ""' 2>/dev/null)
    
    # SpikyBot/またはSpikyBot_で始まるかチェック
    if [[ ! "$CANVAS_NAME" =~ ^SpikyBot[/_] ]]; then
      echo "Error: 'SpikyBot/'または'SpikyBot_'で始まるCanvas以外への追記は許可されていません"
      echo "Canvas名: $CANVAS_NAME"
      echo "許可されるCanvas名の例: SpikyBot/KnowledgeBase, SpikyBot_Debug_Notes"
      exit 1
    fi
    
    echo "Canvas名: $CANVAS_NAME (追記許可)"
    
    # 現在の時刻を取得
    TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
    
    # 追記内容を準備（改行を含むマークダウン）
    APPEND_CONTENT="

---
## 📝 追記 ($TIMESTAMP)

$CONTENT
"
    
    # Canvas編集API呼び出し用のパラメータを準備
    # URLエンコードが必要なためcurlで直接POST
    API_RESPONSE=$(curl -s -X POST \
      -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
      -H "Content-Type: application/x-www-form-urlencoded" \
      --data-urlencode "canvas_id=$CANVAS_ID" \
      --data-urlencode "changes=[{\"operation\": \"insert_at_end\", \"document_content\": {\"type\": \"markdown\", \"markdown\": \"$APPEND_CONTENT\"}}]" \
      "https://slack.com/api/canvases.edit")
    
    API_OK=$(echo "$API_RESPONSE" | jq -r '.ok' 2>/dev/null)
    
    if [ "$API_OK" = "true" ]; then
      echo "Canvas内容を追記しました"
      echo "知識をCanvasに保存完了: $CANVAS_ID"
    else
      echo "Error: Canvas追記に失敗しました"
      echo "$API_RESPONSE" | jq '.' 2>/dev/null
      exit 1
    fi
    ;;
    
  help)
    echo "SpikyBot Memory Operations - Canvas Knowledge Persistence"
    echo ""
    echo "Usage: sb-memory <command> [options]"
    echo ""
    echo "Commands:"
    echo "  list [search]                  - List/search Slack Canvas knowledge base"
    echo "  view <canvas_id>               - View Canvas content"
    echo "  save <canvas_id> 'content'     - Save knowledge to Canvas"
    echo ""
    echo "Examples:"
    echo "  sb-memory list"
    echo "  sb-memory list 'SpikyBot/all'"
    echo "  sb-memory view F1234567890"
    echo "  sb-memory save F1234567890 '## Bug Fix\\n- Issue #123を修正'"
    echo ""
    echo "Note: saveは'SpikyBot/'または'SpikyBot_'で始まるCanvas名のみ許可"
    echo "Note: 全ての知識はSlack Canvasに永続化されます"
    ;;
    
  *)
    echo "Unknown command: $SUBCOMMAND"
    echo "Run 'sb-memory help' for usage"
    exit 1
    ;;
esac