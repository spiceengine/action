#!/bin/bash

# SpikyBot 統合コマンド

# Slack API共通関数
slack_api_call() {
  local method="$1"
  local params="$2"
  
  if [ -z "$SLACK_BOT_TOKEN" ]; then
    echo "Error: SLACK_BOT_TOKEN環境変数が設定されていません"
    return 1
  fi
  
  curl -s -X GET \
    -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
    -H "Content-Type: application/x-www-form-urlencoded" \
    "https://slack.com/api/${method}?${params}"
}

SUBCOMMAND="$1"
shift

case "$SUBCOMMAND" in
  comment)
    # sb-commentの機能を統合
    FINALIZE=false
    MESSAGE=""
    
    while [[ $# -gt 0 ]]; do
      case $1 in
        --finalize)
          FINALIZE=true
          shift
          ;;
        *)
          MESSAGE="$*"
          break
          ;;
      esac
    done
    
    if [ -z "$MESSAGE" ]; then
      echo "Usage: sb comment [--finalize] 'message'"
      exit 1
    fi
    
    if [ "$FINALIZE" = true ]; then
      FINAL_MESSAGE="@$GITHUB_ACTOR $MESSAGE"
      gh issue comment "$SESSION_NUMBER" --body "$FINAL_MESSAGE"
    else
      if [ -n "$AGENT_INITIAL_COMMENT_ID" ]; then
        CURRENT_BODY=$(gh api repos/$GITHUB_REPOSITORY/issues/comments/$AGENT_INITIAL_COMMENT_ID --jq '.body' 2>/dev/null || echo "")
        CURRENT_TIME="[$(date '+%Y-%m-%d %H:%M:%S')]"
        if [ -n "$CURRENT_BODY" ]; then
          NEW_BODY="$CURRENT_BODY

$CURRENT_TIME $MESSAGE"
        else
          NEW_BODY="$CURRENT_TIME $MESSAGE"
        fi
        gh issue comment "$SESSION_NUMBER" --edit "$AGENT_INITIAL_COMMENT_ID" --body "$NEW_BODY"
      else
        gh issue comment "$SESSION_NUMBER" --body "$MESSAGE"
      fi
    fi
    ;;
    
  pr)
    # sb-prの機能を統合
    TITLE="$1"
    BODY="$2"
    
    if [ -z "$TITLE" ] || [ -z "$BODY" ]; then
      echo "Usage: sb pr 'title' 'body'"
      exit 1
    fi
    
    if [ "$EVENT_NAME" = "pull_request" ]; then
      echo "PRセッション中のため、PR #$SESSION_NUMBER を更新します"
      gh pr edit "$SESSION_NUMBER" --title "$TITLE" --body "$BODY"
    else
      EXISTING_PR=$(gh pr list --head "$CURRENT_BRANCH" --json number --jq '.[0].number' 2>/dev/null)
      if [ -n "$EXISTING_PR" ]; then
        echo "既存のPR #$EXISTING_PR を更新します"
        gh pr edit "$EXISTING_PR" --title "$TITLE" --body "$BODY"
      else
        echo "新規PRを作成します"
        PR_OUTPUT=$(gh pr create --title "$TITLE" --body "$BODY" --assignee "@me" 2>&1)
        PR_NUMBER=$(echo "$PR_OUTPUT" | grep -o 'pull/[0-9]*' | sed 's/pull\///')
        echo "$PR_OUTPUT"
        if [ -n "$PR_NUMBER" ]; then
          echo "LATEST_PR_NUMBER=$PR_NUMBER" >> "$GITHUB_ENV"
        fi
      fi
    fi
    ;;
    
  status)
    # 統合状態確認
    echo "=== SpikyBot Status ==="
    echo "Session: $EVENT_NAME #$SESSION_NUMBER"
    echo "Branch: $(git branch --show-current)"
    echo "Latest PR: ${LATEST_PR_NUMBER:-none}"
    echo ""
    echo "=== Recent Comments ==="
    gh issue view "$SESSION_NUMBER" --json comments --jq '.comments[-3:] | .[] | "[\(.author.login)] \(.body)" | .[0:100]' 2>/dev/null || echo "No comments"
    echo ""
    echo "=== Git Status ==="
    git status --short
    ;;
    
  git)
    # Git操作のラッパー
    GIT_CMD="$1"
    shift
    
    case "$GIT_CMD" in
      add)
        if [ $# -eq 0 ]; then
          echo "Error: ファイルを指定してください"
          echo "Usage: sb git add <filename>"
          exit 1
        fi
        for arg in "$@"; do
          if [[ "$arg" == "." ]] || [[ "$arg" == "-A" ]] || [[ "$arg" == "--all" ]]; then
            echo "Error: '$arg' は使用禁止です"
            exit 1
          fi
        done
        /usr/bin/git add "$@"
        ;;
        
      push)
        CURRENT_BRANCH=$(/usr/bin/git branch --show-current)
        if [[ ! "$CURRENT_BRANCH" =~ ^spikybot/ ]]; then
          echo "Error: spikybot/*ブランチのみpush可能です"
          exit 1
        fi
        if [ $# -eq 0 ]; then
          /usr/bin/git push origin "$CURRENT_BRANCH"
        else
          /usr/bin/git push "$@"
        fi
        ;;
        
      *)
        # その他のgitコマンドは許可
        /usr/bin/git "$GIT_CMD" "$@"
        ;;
    esac
    ;;
    
  continue)
    # 継続セッション準備（旧sb-continue）
    SITUATION="$1"
    shift
    COMMAND="$*"
    
    if [ -z "$SITUATION" ] || [ -z "$COMMAND" ]; then
      echo "Usage: sb continue 'situation' 'command'"
      exit 1
    fi
    
    # 継続スクリプト作成
    cat > "$SB_DIR/continue.sh" << SCRIPT
#!/bin/bash
$COMMAND
SCRIPT
    chmod +x "$SB_DIR/continue.sh"
    
    # プロンプト継続ファイル作成
    cat > "$SB_DIR/prompt-continue.txt" << PROMPT
$SITUATION
再開時に実行すべきコマンド: $COMMAND
PROMPT
    echo "継続セッションを準備しました"
    ;;
    
  debug)
    # デバッグ情報収集（旧sb-debug）
    echo "=== デバッグ情報 ==="
    echo "Node: $(node --version 2>/dev/null || echo 'not installed')"
    echo "NPM: $(npm --version 2>/dev/null || echo 'not installed')"
    echo "Git: $(git --version)"
    echo "PWD: $(pwd)"
    echo "Branch: $(git branch --show-current 2>/dev/null || echo 'not in git repo')"
    echo "Session: $EVENT_NAME #$SESSION_NUMBER"
    echo "Files:"
    ls -la
    echo ""
    echo "Git Status:"
    git status 2>/dev/null || echo 'not in git repo'
    ;;
    
  knowledge-list)
    # Canvas一覧取得
    SEARCH_QUERY="$1"
    
    if [ -n "$SEARCH_QUERY" ]; then
      echo "=== Slack Canvas検索: '$SEARCH_QUERY' ==="
    else
      echo "=== Slack Canvas一覧 ==="
    fi
    
    # デバッグ情報
    echo "Debug: SLACK_BOT_TOKEN設定状況: ${SLACK_BOT_TOKEN:+設定済み}${SLACK_BOT_TOKEN:-未設定}"
    echo "Debug: トークン先頭4文字: ${SLACK_BOT_TOKEN:0:4}***"
    
    # Slack API経由でCanvas一覧を取得（検索クエリがある場合は検索）
    if [ -n "$SEARCH_QUERY" ]; then
      # 検索APIを使用
      RESPONSE=$(slack_api_call "files.list" "types=canvas&count=200&query=${SEARCH_QUERY}")
    else
      # 通常のリスト取得
      RESPONSE=$(slack_api_call "files.list" "types=canvas&count=200&show_files_hidden_by_limit=true")
    fi
    CURL_EXIT_CODE=$?
    
    echo "Debug: curl終了コード: $CURL_EXIT_CODE"
    echo "Debug: レスポンス長: ${#RESPONSE}"
    
    if [ $CURL_EXIT_CODE -ne 0 ]; then
      echo "Error: Slack API呼び出しに失敗しました (curl終了コード: $CURL_EXIT_CODE)"
      exit 1
    fi
    
    # APIレスポンスを解析
    OK_STATUS=$(echo "$RESPONSE" | jq -r '.ok' 2>/dev/null)
    if [ "$OK_STATUS" != "true" ]; then
      echo "Error: Canvas一覧の取得に失敗しました"
      echo "$RESPONSE" | jq '.' 2>/dev/null || echo "$RESPONSE"
      exit 1
    fi
    
    # Canvas一覧を整形して表示
    echo "=== Canvas一覧 ==="
    echo "$RESPONSE" | jq -r '.files[] | "- ID: \(.id)\n  名前: \(.name // .title // "無題")\n  作成日: \(.created)\n  URL: \(.permalink)\n"' 2>/dev/null
    
    # 総数とページング情報を表示
    TOTAL_COUNT=$(echo "$RESPONSE" | jq '.files | length' 2>/dev/null || echo "0")
    echo "合計: ${TOTAL_COUNT}個のCanvas"
    
    # ページング情報があれば表示
    HAS_MORE=$(echo "$RESPONSE" | jq -r '.has_more // false' 2>/dev/null)
    if [ "$HAS_MORE" = "true" ]; then
      echo "注意: さらに多くのCanvasが存在する可能性があります"
    fi
    
    # デバッグ: 権限情報
    echo ""
    echo "=== デバッグ情報 ==="
    echo "使用しているトークンのスコープで表示可能なCanvasのみが表示されています"
    echo "もし期待するCanvasが表示されない場合:"
    echo "1. Canvasが存在するチャンネルにBotが追加されているか確認"
    echo "2. Canvas名が正しいか確認（大文字小文字、スペース等）"
    ;;
    
  knowledge-view)
    # Canvas内容表示
    CANVAS_ID="$1"
    
    if [ -z "$CANVAS_ID" ]; then
      echo "Usage: sb knowledge-view <canvas_id>"
      echo "  canvas_id: Canvas file ID (e.g., F1234567890)"
      exit 1
    fi
    
    echo "=== Canvas内容表示: $CANVAS_ID ==="
    
    # Canvas情報を取得
    RESPONSE=$(slack_api_call "files.info" "file=${CANVAS_ID}")
    CURL_EXIT_CODE=$?
    
    if [ $CURL_EXIT_CODE -ne 0 ]; then
      echo "Error: Canvas情報の取得に失敗しました"
      exit 1
    fi
    
    # レスポンス確認
    OK_STATUS=$(echo "$RESPONSE" | jq -r '.ok' 2>/dev/null)
    if [ "$OK_STATUS" != "true" ]; then
      echo "Error: Canvas取得エラー"
      echo "$RESPONSE" | jq '.' 2>/dev/null || echo "$RESPONSE"
      exit 1
    fi
    
    # Canvas情報を表示
    echo "=== Canvas情報 ==="
    echo "$RESPONSE" | jq '{
      id: .file.id,
      name: .file.name,
      title: .file.title,
      created: .file.created,
      user: .file.user,
      permalink: .file.permalink
    }' 2>/dev/null || echo "$RESPONSE"
    
    # Canvas内容を取得（document_contentフィールドを確認）
    echo ""
    echo "=== Canvas内容 ==="
    
    # document_contentフィールドを確認
    DOCUMENT_CONTENT=$(echo "$RESPONSE" | jq -r '.file.document_content // empty' 2>/dev/null)
    
    if [ -n "$DOCUMENT_CONTENT" ]; then
      # document_contentが存在する場合
      CONTENT_TYPE=$(echo "$DOCUMENT_CONTENT" | jq -r '.type // empty' 2>/dev/null)
      if [ "$CONTENT_TYPE" = "markdown" ]; then
        # Markdown内容を表示
        echo "Canvas内容（Markdown形式）:"
        echo "$DOCUMENT_CONTENT" | jq -r '.markdown // empty' 2>/dev/null
      else
        echo "Canvas内容（形式: $CONTENT_TYPE）:"
        echo "$DOCUMENT_CONTENT" | jq '.' 2>/dev/null
      fi
    else
      # document_contentが存在しない場合は他のフィールドも確認
      echo "document_contentフィールドが存在しません。"
      echo ""
      echo "利用可能なファイルフィールド:"
      echo "$RESPONSE" | jq '.file | keys' 2>/dev/null | head -20
      
      # Gitリポジトリから保存された知識を読み取る
      echo ""
      echo "=== 保存された知識（代替手段） ==="
      KNOWLEDGE_KEY="canvas_${CANVAS_ID}"
      KNOWLEDGE_FILE=".spikybot/knowledge/knowledge.json"
      
      if [ -f "$KNOWLEDGE_FILE" ]; then
        echo "Canvas $CANVAS_ID に関連する知識:"
        jq -r --arg prefix "$KNOWLEDGE_KEY" 'to_entries[] | select(.key | startswith($prefix)) | "- \(.key): \(.value.value)\n  保存日時: \(.value.timestamp)"' "$KNOWLEDGE_FILE" 2>/dev/null || echo "保存された知識はありません"
      else
        echo "Gitベースの知識も存在しません"
      fi
    fi
    ;;
    
  knowledge-append)
    # Canvas内容追記
    CANVAS_ID="$1"
    CONTENT="$2"
    
    if [ -z "$CANVAS_ID" ] || [ -z "$CONTENT" ]; then
      echo "Usage: sb knowledge-append <canvas_id> 'markdown_content'"
      echo "  canvas_id: Canvas file ID (e.g., F1234567890)"
      echo "  markdown_content: 追記するマークダウン内容"
      exit 1
    fi
    
    echo "=== Canvas内容追記: $CANVAS_ID ==="
    
    # Canvas情報を取得して名前を確認
    CANVAS_INFO=$(slack_api_call "files.info" "file=${CANVAS_ID}")
    if [ $? -ne 0 ]; then
      echo "Error: Canvas情報の取得に失敗しました"
      exit 1
    fi
    
    # Canvas名を取得 (name, title, または filename フィールドから)
    CANVAS_NAME=$(echo "$CANVAS_INFO" | jq -r '.file.name // .file.title // .file.filename // ""' 2>/dev/null)
    
    # SpikyBot/またはSpikyBot_で始まるかチェック
    if [[ ! "$CANVAS_NAME" =~ ^SpikyBot[/_] ]]; then
      echo "Error: 'SpikyBot/'または'SpikyBot_'で始まるCanvas以外への追記は許可されていません"
      echo "Canvas名: $CANVAS_NAME"
      echo "許可されるCanvas名の例: SpikyBot/KnowledgeBase, SpikyBot_Debug_Notes"
      exit 1
    fi
    
    echo "Canvas名: $CANVAS_NAME (追記許可)"
    
    # 現在の時刻を取得
    TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
    
    # 追記内容を準備（改行を含むマークダウン）
    APPEND_CONTENT="

---
## 📝 追記 ($TIMESTAMP)

$CONTENT
"
    
    # Canvas編集API呼び出し用のパラメータを準備
    # URLエンコードが必要なためcurlで直接POST
    API_RESPONSE=$(curl -s -X POST \
      -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
      -H "Content-Type: application/x-www-form-urlencoded" \
      --data-urlencode "canvas_id=$CANVAS_ID" \
      --data-urlencode "changes=[{\"operation\": \"insert_at_end\", \"document_content\": {\"type\": \"markdown\", \"markdown\": \"$APPEND_CONTENT\"}}]" \
      "https://slack.com/api/canvases.edit")
    
    API_OK=$(echo "$API_RESPONSE" | jq -r '.ok' 2>/dev/null)
    
    if [ "$API_OK" = "true" ]; then
      echo "Canvas内容を追記しました"
      
      # Gitリポジトリの知識ベースに保存
      KNOWLEDGE_DIR=".spikybot/knowledge"
      mkdir -p "$KNOWLEDGE_DIR"
      KNOWLEDGE_FILE="$KNOWLEDGE_DIR/knowledge.json"
      KNOWLEDGE_KEY="canvas_${CANVAS_ID}_$(date +%s)"
      
      # 既存のJSONを読み込むか、新規作成
      if [ -f "$KNOWLEDGE_FILE" ]; then
        # 既存のJSONに追加
        jq --arg key "$KNOWLEDGE_KEY" --arg value "$CONTENT" --arg ts "$TIMESTAMP" \
          '.[$key] = {value: $value, timestamp: $ts}' "$KNOWLEDGE_FILE" > "$KNOWLEDGE_FILE.tmp" && \
          mv "$KNOWLEDGE_FILE.tmp" "$KNOWLEDGE_FILE"
      else
        # 新規JSON作成
        jq -n --arg key "$KNOWLEDGE_KEY" --arg value "$CONTENT" --arg ts "$TIMESTAMP" \
          '{($key): {value: $value, timestamp: $ts}}' > "$KNOWLEDGE_FILE"
      fi
      
      echo "知識をGitリポジトリに保存しました: $KNOWLEDGE_KEY"
      
      # 自動的にコミット
      git add "$KNOWLEDGE_FILE" 2>/dev/null && \
        git commit -m "Knowledge: Canvas追記 - $TIMESTAMP" 2>/dev/null && \
        echo "知識ベースの変更をコミットしました"
    else
      echo "Error: Canvas追記に失敗しました"
      echo "$API_RESPONSE" | jq '.' 2>/dev/null
      exit 1
    fi
    ;;
    
  memory-save)
    # 簡易知識保存
    KEY="$1"
    VALUE="$2"
    
    if [ -z "$KEY" ] || [ -z "$VALUE" ]; then
      echo "Usage: sb memory-save <key> <value>"
      exit 1
    fi
    
    KNOWLEDGE_DIR=".spikybot/knowledge"
    mkdir -p "$KNOWLEDGE_DIR"
    KNOWLEDGE_FILE="$KNOWLEDGE_DIR/knowledge.json"
    TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
    
    # 既存のJSONを読み込むか、新規作成
    if [ -f "$KNOWLEDGE_FILE" ]; then
      jq --arg key "$KEY" --arg value "$VALUE" --arg ts "$TIMESTAMP" \
        '.[$key] = {value: $value, timestamp: $ts}' "$KNOWLEDGE_FILE" > "$KNOWLEDGE_FILE.tmp" && \
        mv "$KNOWLEDGE_FILE.tmp" "$KNOWLEDGE_FILE"
    else
      jq -n --arg key "$KEY" --arg value "$VALUE" --arg ts "$TIMESTAMP" \
        '{($key): {value: $value, timestamp: $ts}}' > "$KNOWLEDGE_FILE"
    fi
    
    echo "知識を保存しました: $KEY = $VALUE"
    
    # 自動的にコミット
    git add "$KNOWLEDGE_FILE" 2>/dev/null && \
      git commit -m "Memory: $KEY を保存 - $TIMESTAMP" 2>/dev/null && \
      echo "知識ベースの変更をコミットしました"
    ;;
    
  memory-get)
    # 簡易知識取得
    KEY="$1"
    
    if [ -z "$KEY" ]; then
      echo "Usage: sb memory-get <key>"
      exit 1
    fi
    
    KNOWLEDGE_FILE=".spikybot/knowledge/knowledge.json"
    
    if [ -f "$KNOWLEDGE_FILE" ]; then
      VALUE=$(jq -r --arg key "$KEY" '.[$key].value // empty' "$KNOWLEDGE_FILE")
      TIMESTAMP=$(jq -r --arg key "$KEY" '.[$key].timestamp // empty' "$KNOWLEDGE_FILE")
      if [ -n "$VALUE" ]; then
        echo "キー: $KEY"
        echo "値: $VALUE"
        echo "保存日時: $TIMESTAMP"
      else
        echo "知識が見つかりません: $KEY"
        exit 1
      fi
    else
      echo "知識ベースファイルが存在しません"
      exit 1
    fi
    ;;
    
  memory-list)
    # 知識一覧
    KNOWLEDGE_FILE=".spikybot/knowledge/knowledge.json"
    
    if [ -f "$KNOWLEDGE_FILE" ]; then
      echo "=== 保存されている知識 ==="
      jq -r 'to_entries[] | "- \(.key): \(.value.value) (保存日時: \(.value.timestamp))"' "$KNOWLEDGE_FILE"
    else
      echo "知識ベースファイルが存在しません"
    fi
    ;;
    
  help|--help|-h|"")
    echo "SpikyBot - GitHub Actions AI Assistant"
    echo ""
    echo "Usage: sb <command> [options]"
    echo ""
    echo "Commands:"
    echo "  comment [--finalize] 'message'  - Post/update comment"
    echo "  pr 'title' 'body'              - Create/update PR"
    echo "  status                         - Show current status"
    echo "  git <git-command>              - Safe git operations"
    echo "  continue 'situation' 'command'  - Prepare continuation session"
    echo "  debug                          - Show debug information"
    echo "  knowledge-list [search]        - List/search Slack Canvas knowledge base"
    echo "  knowledge-view <id>            - View Canvas content"
    echo "  knowledge-append <id> 'content' - Append to Canvas"
    echo "  memory-save <key> <value>      - Save knowledge to Git repository"
    echo "  memory-get <key>               - Get saved knowledge"
    echo "  memory-list                    - List all saved knowledge"
    echo ""
    echo "Examples:"
    echo "  sb comment '作業を開始しました'"
    echo "  sb comment --finalize '作業完了'"
    echo "  sb pr 'Fix bug' 'Fixed the issue'"
    echo "  sb git add README.md"
    echo "  sb git commit -m 'Update README'"
    echo "  sb git push"
    echo "  sb continue 'npm install中' 'npm install'"
    echo "  sb debug"
    echo "  sb knowledge-list"
    echo "  sb knowledge-list 'SpikyBot/all'"
    echo "  sb knowledge-view F1234567890"
    echo "  sb knowledge-append F1234567890 '## Bug Fix\\n- Issue #123を修正'"
    echo "  sb memory-save password '桜の花びらが舞う春の朝'"
    echo "  sb memory-get password"
    echo "  sb memory-list"
    echo ""
    echo "Note: knowledge-appendは'SpikyBot/'または'SpikyBot_'で始まるCanvas名のみ許可"
    echo "Note: memory-*コマンドはGitリポジトリに知識を保存します"
    ;;
    
  *)
    echo "Unknown command: $SUBCOMMAND"
    echo "Run 'sb help' for usage"
    exit 1
    ;;
esac